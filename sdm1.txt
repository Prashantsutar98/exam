2.Functional Requirements
    1 User Registration and Authentication
•	Users should be able to create an account by providing their name, email address, and password.
•	The system should validate the user's email address during registration.
•	Users should be able to log in to the system using their credentials.
2 Event Browsing and Searching
•	The system should display a list of available events with relevant details such as event name, date, time, and venue.
•	Users should be able to search for events based on event name, category, date, or venue.
3.3 Seat Selection and Booking
•	Users should be able to select seats for an event from a seating layout or chart.
•	The system should show the availability of seats in real-time.
•	Users should be able to select multiple seats for booking.
•	Users should be able to choose different seat categories (e.g., VIP, General, etc.) if applicable.
3.4 Online Payment Integration
•	The system should integrate with a secure online payment gateway to process ticket payments.
•	Users should be able to select a payment method (credit card, debit card, net banking, etc.).
•	The system should provide a confirmation and receipt after successful payment.
3.5 Ticket Cancellation and Refund Management
•	Users should be able to cancel their booked tickets within a specified time period.
•	The system should calculate the refund amount based on the cancellation policy.
•	The refunded amount should be credited back to the user's original payment method.
3.6 User Profile Management
•	Users should be able to view and update their profile information.
•	Users should be able to view their booking history.
•	Users should be able to change their password.
3.7 Admin Panel
•	An admin panel should be available for authorized personnel to manage events and tickets.
•	Admins should be able to add, edit, and delete events.
•	Admins should be able to view and manage bookings and user profiles.
•	Admins should be able to generate reports on ticket sales, revenue, etc.


 +--------------+        +------------+        +--------------+
       |     User     |        |   Event    |        |    Ticket    |
       +--------------+        +------------+        +--------------+
       |   UserID     |        |  EventID   |        |   TicketID   |
       |   Username   |        |  Name      |        |   EventID    |
       |   Email      |        |  Date      |        |   SeatNumber |
       |   Password   |        |  Time      |        |   Price      |
       +--------------+        |  Venue     |        |   TicketType |
                              +------------+        +--------------+
                                     |
                                     | 1     N
                                     |
                              +--------------+
                              |    Booking   |
                              +--------------+
                              |  BookingID   |
                              |  UserID      |
                              |  TicketID    |
                              |  BookingDate |
                              |  Status      |
                              +--------------+
                                     |
                                     | N     1
                                     |
                              +--------------+
                              |   Payment    |
                              +--------------+
                              |  PaymentID   |
                              |  BookingID   |
                              |  PaymentMethod |
                              |  Amount      |
                              |  TransactionID |
                              |  Status      |
                              +--------------+
                                     |
                                     | N     1
                                     |
                              +--------------+
                              |    Venue     |
                              +--------------+
                              |  VenueID     |
                              |  Name        |
                              |  Address     |
                              |  Capacity    |
                              +--------------+

 
In the above ER diagram, the entities are represented as rectangles, and the attributes are listed within them. The primary key of each entity is underlined, and the relationships between entities are shown using lines and cardinality notation (1 for one and N for many).
Here's a summary of the relationships:
•	A User can have multiple Bookings (1 to N relationship).
•	An Event can have multiple Tickets (1 to N relationship).
•	A Ticket is associated with one Event (N to 1 relationship).
•	A Booking is associated with one User and one Ticket (N to 1 relationship).
•	A Payment is associated with one Booking (N to 1 relationship).
•	An Event is associated with one Venue (N to 1 relationship).



-- Table: Users
CREATE TABLE Users (
  UserID INT PRIMARY KEY AUTO_INCREMENT,
  Username VARCHAR(50) NOT NULL,
  Email VARCHAR(100) NOT NULL,
  Password VARCHAR(100) NOT NULL
);

-- Table: Events
CREATE TABLE Events (
  EventID INT PRIMARY KEY AUTO_INCREMENT,
  Name VARCHAR(100) NOT NULL,
  Date DATE NOT NULL,
  Time TIME NOT NULL,
  Venue VARCHAR(100) NOT NULL
);

-- Table: Tickets
CREATE TABLE Tickets (
  TicketID INT PRIMARY KEY AUTO_INCREMENT,
  EventID INT NOT NULL,
  SeatNumber VARCHAR(20) NOT NULL,
  Price DECIMAL(8, 2) NOT NULL,
  TicketType VARCHAR(50) NOT NULL,
  FOREIGN KEY (EventID) REFERENCES Events(EventID)
);

-- Table: Bookings
CREATE TABLE Bookings (
  BookingID INT PRIMARY KEY AUTO_INCREMENT,
  UserID INT NOT NULL,
  TicketID INT NOT NULL,
  BookingDate DATE NOT NULL,
  Status ENUM('Confirmed', 'Canceled') NOT NULL,
  FOREIGN KEY (UserID) REFERENCES Users(UserID),
  FOREIGN KEY (TicketID) REFERENCES Tickets(TicketID)
);

-- Table: Payments
CREATE TABLE Payments (
  PaymentID INT PRIMARY KEY AUTO_INCREMENT,
  BookingID INT NOT NULL,
  PaymentMethod VARCHAR(50) NOT NULL,
  Amount DECIMAL(8, 2) NOT NULL,
  TransactionID VARCHAR(100) NOT NULL,
  Status ENUM('Completed', 'Failed') NOT NULL,
  FOREIGN KEY (BookingID) REFERENCES Bookings(BookingID)
);

-- Table: Venues
CREATE TABLE Venues (
  VenueID INT PRIMARY KEY AUTO_INCREMENT,
  Name VARCHAR(100) NOT NULL,
  Address VARCHAR(200) NOT NULL,
  Capacity INT NOT NULL
);